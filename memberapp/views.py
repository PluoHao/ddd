import loggingimport randomfrom whoosh.qparser import QueryParserfrom django.shortcuts import render, get_object_or_404, redirectfrom pymysql import DatabaseErrorfrom .models import GoodType, Goods# Create your views here.# 首页def index(request):    # 查询数据库全部分类全部商品    # 按照分类查询商品，并分别存储传回前端    # 1    #查询全部分类    #查询全部商品    # 2 优化    #查询分类    #该类下全部商品# ------------------方案一#     查询商品按照固定分类名称#     #返回首页#     try:                #获得表中水果的列没有报错#         good_fruit_type = get_object_or_404(GoodType,title='水果')#         #随机取出和关联查询#         fruit_goods = random.sample(list(good_fruit_type.goods_set.all()),5)#         # 生鲜#     except DatabaseError as e:#         logging.warning(e)    # return render(request, 'index.html', locals())# 方案二#     type = GoodType.objects.all()#     goods =GoodType.objects.all()#方案三    ac = []    typess = GoodType.objects.all()    for type in typess:        b = {}        b['type'] = type.title        print(type)        good_fruit_typed = get_object_or_404(GoodType,title=type)        #随机取出和关联查询        f_goods = random.sample(list(good_fruit_typed.goods_set.all()),10)        b['goods'] = f_goods        ac.append(b)    return render(request,'index.html',locals())def login_out(request):    try:        if request.session['user_name']:            del request.session['user_name']            del request.session['user_id']    except KeyError as e:        logging.warning(e)    return redirect('/')def detail_one(request):    #查询数据库该id的商品    good_id = request.GET.get('goodid')    try:        goodone = Goods.objects.filter(id=good_id)    except DatabaseError as e:        logging.warning(e)    return render(request,'detail.html',{'goodone':goodone[0]})